Function in C++
A function is block of code which is used to perform a particular task. Another way of doing this is that you write these lines inside a function and call that function every time you want to display values. This would make you code simple, readable and reusable.

Syntax of Function
return_type function_name (parameter_list)
{
   //C++ Statements
}

#include <iostream>
using namespace std;
/* This function adds two integer values
 * and returns the result
 */
int sum(int num1, int num2){
   int num3 = num1+num2; 
   return num3;
}
int main(){
   //Calling the function
   cout<<sum(1,99);
   return 0;
}


function declaration, definition and calling of function.
The main thing is that when we define the function before the main() function in our program then you donâ€™t need to do function declaration but if we are writing our function after the main() function we need to declare the function first, else you will get compilation error.

syntax of function declaration:
return_type function_name(parameter_list);

#include <iostream>
using namespace std;
//Function declaration
int sum(int,int);
//Main function
int main(){
   //Calling the function
   cout<<sum(1,99);
   return 0;
}
/* Function is defined after the main method */
int sum(int num1, int num2){
   int num3 = num1+num2;
   return num3;
}

Note: While providing parameter_list can avoid the parameter names given int sum(int,int); instead of int sum(int num1,int num2);.

Function definition: Writing the full body of function is known as defining a function.

syntax of function definition:
return_type function_name(parameter_list) {
    //Statements inside function
}

Calling function: We can call the function like this:
function_name(parameters);

Types of function
1) Built-in functions
2) User-defined functions

1) Built-in functions
Built-in functions are also known as library functions. No need to declare and define these functions as they are already written in the C++ libraries such as iostream, cmath etc. We can directly call them when we need.

#include <iostream>
#include <cmath>
using namespace std;
int main(){
    /* Calling the built-in function 
     * pow(x, y) which is x to the power y
     * We are directly calling this function
     */
    cout<<pow(2,5);
    return 0;
}

2) User-defined functions
The functions that we declare and write in our programs are user-defined functions.

Default Arguments in C++ Functions
The default arguments are used when you provide no arguments or only few arguments while calling a function. The default arguments are used during compilation of program. 

#include <iostream>
using namespace std;
int sum(int a, int b=1, int c=2);
int main(){
   /* a value is passed as
    * 1 and b and c values are taken from
    * default arguments.
    */
   cout<<sum(1)<<endl;
   /* a value is passed as
    * 1 and b value as 2, value of c values is
    * taken from default arguments.
    */
   cout<<sum(1, 2)<<endl;
   /* the three values are passed during function call, 
    *  hence no
    * default arguments have been used.
    */
   cout<<sum(1, 2, 3)<<endl;
   return 0;
}
int sum(int a, int b, int c){
   int z;
   z = a+b+c;
   return z;
}

Valid:

int sum(int a=10, int b=20, int c=30);
int sum(int a, int b=20, int c=30);
int sum(int a, int b, int c=30);

Invalid:

int sum(int a=10, int b, int c=30);
int sum(int a, int b=20, int c);
int sum(int a=10, int b=20, int c);


C++ Recursion

The process in which a function calls itself is known as recursion and the corresponding function is called the recursive function. 

void recurse()
{
    ... .. ...
    recurse();
    ... .. ...
}

int main()
{
    ... .. ...
    recurse();
    ... .. ...
}

The recursion continues until some condition is met.
To prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call and the other doesn't.

Advantages of Recursion
It makes our code shorter and cleaner.
Recursion is required in problems concerning data structures and advanced algorithms, such as Graph and Tree Traversal.

Disadvantages of Recursion
It takes a lot of stack space compared to an iterative program.
It uses more processor time.
It can be more difficult to debug compared to an equivalent iterative program.

int sum(int k) {
  if (k > 0) {
    return k + sum(k - 1);
  } else {
    return 0;
  }
}
int main() {
  int result = sum(10);
  cout << result;
  return 0;
}
10 + sum(9)
10 + ( 9 + sum(8) )
10 + ( 9 + ( 8 + sum(7) ) )
...
10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0)
10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0


#include <iostream>
using namespace std;
int total=0;
void sum(int x){
    if(x>0){
        total = total + x;
       // cout<<x<<endl;
        //cout<<total<<endl;
        sum(x-1);
    }
      
}
int main() {
    sum(8);
    cout<<total<<endl;
    return 0;
    
}

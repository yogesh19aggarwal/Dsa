Strings in C++

Strings are words that are made up of characters, hence they are known as sequence of characters.
In C++ we have two ways to create and use strings: 
1) By creating char arrays and treat them as string 
2) By creating string object

1) Array of Characters – Also known as C Strings

#include <iostream>
using namespace std;
int main(){
   char name[10] = "xyz";
   cout<<name;
   return 0;
}
Output:xyz

Example 2: Getting user input as string
This can be considered as inefficient method of reading user input, why? Because when we read 
the user input string using cin then only the first word of the string is stored in char array 
and rest get ignored. The cin function considers the space in the string as delimiter and ignore 
the part after it.

#include <iostream>
using namespace std;
int main(){
   char name[15];
   cout<<"Enter your full name:";
   cin>>name;
   cout<<"You entered: "<<name;
   return 0;
}
Output:

You can see that only the “The” got captured in the book and remaining part after space got ignored. How to deal with this then? Well, for this we can use cin.get function, which reads the complete line entered by user.

Example 3: Correct way of capturing user input string using cin.get

#include <iostream>
using namespace std;
int main(){
   char name[15];
   cout<<"Enter your full name";
 
   cin.get(name, 15);
   cout<<"You entered: "<<name;
   return 0;
}
Output:

Drawback of this method
1) Size of the char array is fixed, which means the size of the string created through it is 
   fixed in size, more memory cannot be allocated to it during runtime. For example, lets say 
   you have created an array of character with the size 15 and user enters the string of size 
   20 then the last five characters would be truncated from the string.

On the other hand if you create a larger array to accommodate user input then the memory is 
wasted if the user input is small and array is much larger then what is needed.

2) In this method, you can only use the in-built functions created for array which don’t help 
   much in string manipulation.


String object in C++
Till now we have seen how to handle strings in C++ using char arrays. Lets see another and better way of handling strings in C++ – string objects.

#include<iostream>
using namespace std;
int main(){
   // This is how we create string object
   string str;
   cout<<"Enter a String:";
   /* This is used to get the user input
    * and store it into str
    */
   getline(cin,str);
   cout<<"You entered: ";
   cout<<str<<endl;
   return 0;
}
Output:

Enter a String:XYZ abc
You entered: XYZ abc

The advantage of using this method is that you need not to declare the size of the string, 
the size is determined at run time, so this is better memory management method. The memory 
is allocated dynamically at runtime so no memory is wasted.

C++ String Functions
      Function								                              Description
int compare(const string& str)                     :-	It is used to compare two string objects.
int length()					                        :-	It is used to find the length of the string.
void swap(string& str)	                           :-	It is used to swap the values of two string 
                                                      objects.
string substr(int pos,int n)	                     :-	It creates a new string object of n characters.
int size()						                        :-	It returns the length of the string in 
                                                      terms of bytes.
void resize(int n)			                        :- It is used to resize the length of the 
                                                      string up to n characters.
string& replace(int pos,int len,string& str)       :-	It replaces portion of the string that begins 
                                                      at character position pos and spans len 
                                                      characters.
string& append(const string& str)	               :-	It adds new characters at the end of another
                                                      string object.
char& at(int pos)	                                 :-	It is used to access an individual character 
                                                      at specified position pos.
int find(string& str,int pos,int n)                :-	It is used to find the string specified in 
                                                      the parameter.
int find_first_of(string& str,int pos,int n)       :-	It is used to find the first occurrence of the specified 
                                                      sequence.
int find_first_not_of(string& str,int pos,int n )  :-	It is used to search the string for the first 
                                                      character that does not match with any of the 
                                                      characters specified in the string.
int find_last_of(string& str,int pos,int n)        :- It is used to search the string for the last 
                                                      character of specified sequence.
int find_last_not_of(string& str,int pos)          :-	It searches for the last character that does 
                                                      not match with the specified sequence.
string& insert()			                           :-	It inserts a new character before the 
                                                      character indicated by the position pos.
int max_size()		                                 :-	It finds the maximum length of the string.
void push_back(char ch)	                           :-	It adds a new character ch at the end of the 
                                                      string.
void pop_back()	                                 :-	It removes a last character of the string.
string& assign()	                                 :- It assigns new value to the string.
int copy(string& str)                              :-	It copies the contents of string into another.
char& back()	                                    :- It returns the reference of last character.
Iterator begin()                                   :-	It returns the reference of first character.
int capacity()	                                    :- It returns the allocated space for the string.
const_iterator cbegin()                            :-	It points to the first element of the string.
const_iterator cend()	                           :- It points to the last element of the string.
void clear()	                                    :- It removes all the elements from the string.
const_reverse_iterator crbegin()                   :-	It points to the last character of the string.
const_char* data()                                 :-	It copies the characters of string into an 
                                                      array.
bool empty()                                       :-	It checks whether the string is empty or not.
string& erase()                                    :-	It removes the characters as specified.
char& front()	                                    :- It returns a reference of the first character.
string&  operator+=()                              :-	It appends a new character at the end of the 
                                                      string.
string& operator=()	                              :- It assigns a new value to the string.
char operator[](pos)	                              :- It retrieves a character at specified position 
                                                      pos.
int rfind()                                        :-	It searches for the last occurrence of the 
                                                      string.
iterator end()	                                    :- It references the last character of the string.
reverse_iterator rend()                            :-	It points to the first character of the string.
void shrink_to_fit()                               :-	It reduces the capacity and makes it equal to 
                                                      the size of the string.
char* c_str()	                                    :- It returns pointer to an array that contains 
                                                      null terminated sequence of characters.
const_reverse_iterator crend()	                  :- It references the first character of the 
                                                      string.
reverse_iterator rbegin()	                        :- It reference the last character of the string.
void reserve(inr len)	                           :- It requests a change in capacity.
allocator_type get_allocator();	                  :- It returns the allocated object associated 
                                                      with the string.

